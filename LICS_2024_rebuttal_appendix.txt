%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
APPENDIX (to be read at the reviewers' discretion) 

	***
More details on the counterexample showing that what in the response to Reviewer_3 we called "cnominal sets" (a natural generalization of nominal sets to countable-supportedness) are not guaranteed to have smallest supporting sets: 

Let Str be the set of streams of atoms, and consider the action of the group of atom-permutations on Str, _[_], to be stream-mapping: for f : Atom -> Atom and s = a0 a1 a2 ... in Str, we have s[f] = (f a0) (f a1) (f a2) ... Now define the equivalence relation ~ on Str to say that two streams are equal almost everywhere, i.e., from a certain position onwards they have the same elements. We have that _[f] preserves ~ for any f, inducing an action on the quotient set Str/~, which we also denote by _[_]. 

This makes (Str/~,_[_]) a cnominal set. Indeed, the fact that permutation takes identity to identity and preserves composition follow immediately from the fact that the corresponding operator on Str satisfies them. Moreover, it is easy to check that, for any element s/~ of Str/~ where s = a0 a1 a2 ... , the set of atoms appearing in the stream, {ai . i >= 0}, is a countable supporting set for s/~; and btw, so is the set of atoms appearing in any suffix of that stream, {ai. i >= n} -- this because the streams "a0 a1 a2 ..." and "an ... an a(n+1) a(n+2) ..." are equivalent, while the set of atoms of the latter is {ai. i >= n}. 

Remark: (Str,_[]), the set of streams together with stream-map, is also a cnominal set, and (Str/~,_[_]) is the quotient cnominal set of (Str,_[]) to ~.

Another remark: Above, we overloaded the _/~ notation: we wrote Str/~ for the quotient set of Str to ~, and also s/~ for the equivalence class of s.

Now take a stream s = a0 a1 a2 ... such that all its atoms ai are distinct. The sets {ai . i >= n} form a downward chain (indexed by n) of supporting sets for s/~ (the equivalence class of s); but their intersection is the empty set, which is not a supporting. This shows that s/~ has no smallest supporting set.   

Here is the link to a formal proof of the above using Isabelle: 

https://github.com/jvanbruegge/binder_datatypes/blob/master/thys/No_Least_Support_Counterexample.thy


	***
Link to the strong induction principles obtained by instantiating Thm. 10 to the structural-congruence-based version of pi-calculus shown on Wikipedia (https://en.wikipedia.org/wiki/%CE%A0-calculus) -- discussed in a response to Reviewer_2: 

https://github.com/jvanbruegge/binder_datatypes/blob/master/thys/Pi_Calculus/Pi_cong.thy


Both of the above-linked Isabelle theory files are part of the publicly available repository containing our development:

https://github.com/jvanbruegge/binder_datatypes

They can be processed with Isabelle following the same instructions as those from the README file in the submitted supplementary material, also available here:

https://github.com/jvanbruegge/binder_datatypes/blob/master/README.md


	***
@Reviewer_1: We were mostly interested in the properties of lansets to the extent to which they were relevant for the scope of our strong rule induction criteria. For example, lansets are closed under applications of standard functors, as mentioned in Section 3 and proved in Appendix A. (To Reviewer_3: The bit that these closure properties bring in addition to those for nominal sets is that (semi)natural supporting-set operators also carry over.) This enables a wide variety of domains for the inductively defined predicates to which our induction criteria apply. 

	***
@Reviewer_3: 

Thank you for the technical comments on lansets, including the observation about naturality being equivalent to semi-naturality. A note about our previous comment on lanset morphisms: The reason why we believe that morphisms f between lansets (S,Smap,Svars) and (S',Smap',Svars') should be required to preserve the supporting-set operators, namely "Svars' (f s) subset_of f (Svars s)" (which is the same as saying that f preserves freshness, in that "x # x implies x #' f s" where # and #' are defined from Svars and Svars'), is because now Svars is an independent operator. By contrast, for nominal sets preservation of support (hence also freshness) is a derived property.  

More on the Dowek-Gabbay permissive nominal sets (as in, e.g., Gilles Dowek, Murdoch James Gabbay: Permissive-Nominal Logic (journal version). CoRR abs/2312.16480 (2023)) not guaranteeing the support's well-behavedness for infinite permutations and the reason why guaranteeing this is important for our results: While in permissive nominal sets one can apply arbitrary (not necessarily finite) permutations, the notion of a set supporting an item is defined by quantifying over all *finite* permutations. Consequently, one can only prove that the support operator is (semi)natural w.r.t. finite permutations. On the other hand, when inferring strong induction, we need (semi)naturality w.r.t. permutations having cardinalities (i.e., with their support having cardinalities) at least as large as the largest number of variables simultaneously bound by a binder in the rules. This is essentially because inferring a strong rule induction principle requires the ability to "refresh" all variables of binders without changing the rules. The refreshing process involves choosing fresh variables and swapping them with the old ones (from the scope of the binder), and (semi)naturality ensures that this does not affect the identity of the terms. (Our proof of Theorem 10 and the heuristic in Section 6 give more details about how this refreshing process fits in the overall scheme for inferring strong rule induction.) So when we have, for example, countable binders, such as binding streams of variables in a term, we want (semi)naturality w.r.t. countable permutations. 

>> is something like "\nu x. \bar{x}(x)" allowed here?

"\nu x. \bar{x}(x). ..." is allowed by the syntax. \nu binds the curly-bracketed x; and the round-bracketed x binds in the rest of the term, shadowing the "\nu x" binder. 

>> l1086: how is 'lift' defined? conjunctively, disjunctively, etc?

Conjunctively. We will clarify. (Defined in the appendix, on line 2227.)

>> l395: Is T supposed to be a Lanset here? Is G supposed to be monotone?

T should be just a set (since that is standard induction recalled); G should be monotone, and we will state that explicitly (to save space, we were counting on the implicit information, since I_G was only defined for monotone G). 

>> Figure 7: line above "affine (iVr x) (iVr)" missing?

We omitted those for all rules with no hypotheses (i.e., axioms).  


Concerning the formalization of our theorems in locales: One way to view the induction theorems with all their assumptions is to add the commands

print_statement Induct.strong_induct[unfolded
  Induct_def Induct1_def Components_def Small_def
  Induct_axioms_def Induct1_axioms_def Components_axioms_def
  conj_imp_eq_imp_imp, rule_format]

print_statement IInduct.BE_iinduct[unfolded
  IInduct_def IInduct1_def CComponents_def Small_def
  IInduct_axioms_def IInduct1_axioms_def CComponents_axioms_def
  conj_imp_eq_imp_imp, rule_format]

For example for the former this prints:

theorem
  fixes Tmap :: "('a ⇒ 'a) ⇒ 'b ⇒ 'b"
    and Tfvars :: "'b ⇒ 'a set"
    and G :: "'a set ⇒ ('b ⇒ bool) ⇒ 'b ⇒ bool"
    and Pfvars :: "'c ⇒ 'a set"
    and t :: "'b"
    and R :: "'c ⇒ 'b ⇒ bool"
    and p :: "'c"
  assumes "infinite UNIV"
    and "regularCard |UNIV|"
    and "Tmap id = id"
    and "⋀σ τ. Small.ssbij σ ⟹ Small.ssbij τ ⟹ Tmap (σ ∘ τ) = Tmap σ ∘ Tmap τ"
    and "⋀t. Small.small (Tfvars t)"
    and "⋀t σ. Small.ssbij σ ⟹ Tfvars (Tmap σ t) ⊆ σ ` Tfvars t"
    and "⋀t σ. Small.ssbij σ ⟹ (⋀a. a ∈ Tfvars t ⟹ σ a = a) ⟹ Tmap σ t = t"
    and "⋀R R' B t. R ≤ R' ⟹ Small.small B ⟹ G B R t ⟹ G B R' t"
    and
    "⋀σ R B t.
        Small.ssbij σ ⟹
        Small.small B ⟹ G B R t ⟹ G (σ ` B) (λt'. R (Tmap (inv σ) t')) (Tmap σ t)"
    and
    "⋀R B t.
        (⋀t. R t ⟹ Induct1.I G t) ⟹
        (⋀σ t. Small.ssbij σ ∧ R t ⟹ R (Tmap σ t)) ⟹
        Small.small B ⟹ G B R t ⟹ ∃C. Small.small C ∧ C ∩ Tfvars t = {} ∧ G C R t"
    and "⋀p. Small.small (Pfvars p)"
    and "Induct1.I G t"
    and
    "⋀p B t.
        Small.small B ⟹
        B ∩ Pfvars p = {} ⟹
        B ∩ Tfvars t = {} ⟹ G B (λt'. Induct1.I G t' ∧ (∀p'. R p' t')) t ⟹ R p t"
  shows "R p t”

We will add this to the documentation. 

	***
A typo in our paper: On line 333, we should have had "x,y \notin X" instead of "x,y \in X".